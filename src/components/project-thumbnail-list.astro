---
import type { ImageMetadata } from 'astro'
import { Picture } from 'astro:assets'

import Link from './link.astro'

interface Props {
	items: {
		id: string
		thumbnail: ImageMetadata
		title: string
	}[]
}

const { items } = Astro.props
---

<ul class="project-list">
	{
		items.map((project) => (
			<li class="project">
				<Link href={`/work/${project.id}/`}>
					<Picture
						alt=""
						formats={['avif', 'webp']}
						sizes={[
							'(min-width: 52em) calc((100vw - 3rlh - 1rlh) / 3)',
							'(min-width: 35em) calc((100vw - 3rlh - 0.5rlh) / 2)',
							'calc(100vw - 3rlh)',
						].join()}
						src={project.thumbnail}
						height={500}
						width={900}
						widths={[500, 640, 750, project.thumbnail.width]}
					/>
					<span class="project-title">{project.title}</span>
				</Link>
			</li>
		))
	}
</ul>

<style lang="scss">
	@use '../styles/utils/mixins' as m;

	@layer component {
		.project-list {
			display: grid;
			font-size: 0.9rem;
			gap: var(--spacing);
			grid-template-columns: 1fr;
			list-style: none;
			margin: 0;
			padding: 0;

			&:has(.project:hover) .project:not(:hover) img {
				opacity: 0.5;
				filter: sepia(0.75);
			}
		}

		.project {
			border: 1px solid var(--color-background-dark);
			border-radius: var(--spacing);
			position: relative;
			@include m.enter-screen-animation;

			a {
				text-decoration: none;
			}

			img {
				border-radius: var(--spacing);
				transition:
					filter var(--transition-duration) var(--cubic-bezier-ease-out),
					opacity var(--transition-duration) var(--cubic-bezier-ease-out);
				width: 100%;

				&:hover {
					transition-timing-function: var(--cubic-bezier-ease-in);
				}
			}
		}

		.project-title {
			background: var(--color-background);
			border-block-start: 1px solid var(--color-background-dark);
			border-inline-end: 1px solid var(--color-background-dark);
			border-start-end-radius: var(--spacing);
			display: inline-block;
			font-weight: 700;
			inset-block-end: -1px;
			inset-inline-start: -1px;
			padding-block: calc(var(--spacing) / 2);
			padding-inline: var(--spacing);
			position: absolute;

			&::before,
			&::after {
				background-image: radial-gradient(
					circle,
					transparent 0,
					transparent calc(var(--spacing) - 1px),
					var(--color-background-dark) calc(var(--spacing) - 1px),
					var(--color-background-dark) var(--spacing),
					var(--color-background) var(--spacing),
					var(--color-background) 100%
				);
				background-position: bottom left;
				background-repeat: no-repeat;
				background-size: calc(var(--spacing) * 2) calc(var(--spacing) * 2);
				content: '';
				display: block;
				height: var(--spacing);
				position: absolute;
				width: var(--spacing);

				:dir(rtl) &,
				:global(.translated-rtl) & {
					background-position: bottom right;
				}
			}

			&::before {
				inset-block-start: calc(var(--spacing) * -1);
				inset-inline-start: 0;
			}

			&::after {
				inset-block-end: 0;
				inset-inline-end: calc(var(--spacing) * -1);
			}
		}

		@media (width >= 35em) {
			.project-list {
				grid-template-columns: repeat(2, 1fr);
			}
		}

		@media (width >= 52em) {
			.project-list {
				grid-template-columns: repeat(3, 1fr);
			}
		}

		@media (prefers-reduced-motion: no-preference) {
			@media (width >= 52em) {
				.project {
					&:nth-child(3n - 2) {
						animation-timeline: view(-3lh);
					}
					&:nth-child(3n + 2) {
						animation-timeline: view(-1rlh);
					}
				}
			}
		}

		@media print {
			.project-list {
				grid-template-columns: repeat(3, 1fr);
			}

			.project-title {
				background: none;
				border: none;
				padding-inline: 0;
				position: static;

				&::before,
				&::after {
					display: none;
				}
			}
		}
	}
</style>
