---
import { actions } from 'astro:actions'
import { Image, Picture } from 'astro:assets'

import type { Track } from '../actions/lastfm'
import timeAgo from '../utils/time-ago'
import { blockText } from '../utils/random'

import albumPlaceholder from '../assets/placeholder-color-background.png'

interface Props {
	user?: string
	limit?: number
}

const { user, limit = 10 } = Astro.props
const isPlaceholder = user === undefined

let recentTracks: Track[] = []
if (isPlaceholder) {
	recentTracks = Array.from({ length: limit }, () => ({
		album: '',
		artist: blockText(4, 10),
		albumArt: '',
		trackName: blockText(4, 10),
		time: 0,
	}))
} else {
	const { data } = await Astro.callAction(actions.lastfm.getRecentTracks, {
		user,
		limit,
	})
	recentTracks = data as Track[]
}
---

<aside class:list={['recent-tracks', isPlaceholder && 'is-placeholder']}>
	<p class="recent-tracks-description">
		I really enjoy listening to music. These are the latest tracks I’ve
		scrobbled to {
			isPlaceholder ? (
				'my Last.fm profile:'
			) : (
				<a href={`https://www.last.fm/user/${user}`}>my Last.fm profile:</a>
			)
		}
	</p>
	<ul class="track-list">
		{
			recentTracks.map((track) => (
				<li
					class="track"
					aria-label={
						isPlaceholder
							? undefined
							: `“${track.trackName}” by ${track.artist}, ${timeAgo(track.time)}`
					}
				>
					{isPlaceholder ? (
						<Image
							alt=""
							class="track-album"
							src={albumPlaceholder}
							height={60}
							width={60}
						/>
					) : (
						<Picture
							alt=""
							class="track-album"
							formats={['avif', 'webp']}
							src={track.albumArt}
							title={`Album: “${track.album}” by ${track.artist}`}
							height={60}
							width={60}
						/>
					)}
					<span class="track-details">
						<strong class="track-name">{track.trackName}</strong>
						<br />
						<span>{track.artist}</span>
						<br />
						<time
							class="track-time"
							datetime={
								isPlaceholder ? undefined : new Date(track.time).toISOString()
							}
						>
							{isPlaceholder ? blockText(5, 7) : timeAgo(track.time)}
						</time>
					</span>
				</li>
			))
		}
	</ul>
</aside>

<style lang="scss">
	@layer component {
		.recent-tracks {
			background: var(--color-background-dark);
			border-radius: var(--spacing);
			grid-column: 1 / span 13;
			margin-block: var(--margin-medium);
			padding: 1rlh;
		}

		.recent-tracks-description {
			color: var(--color-primary-dark);
			font-size: 0.8rem;
			margin-block: 0 1rlh;
		}

		.track-list {
			display: grid;
			list-style: none;
			gap: 1rlh;
			grid-template-columns: repeat(auto-fill, minmax(12rem, 1fr));
			margin: 0;
			padding: 0;
		}

		.track {
			align-items: center;
			display: flex;
			line-height: 1.25;
			gap: 0.5rlh;
		}

		.track-details {
			font-size: 0.8em;
			text-wrap: nowrap;
			text-overflow: ellipsis;
			overflow: hidden;

			.is-placeholder & {
				opacity: 0.25;
			}
		}

		.track-album {
			background: var(--color-background);
			border: 1px solid var(--color-background);
			border-radius: calc(var(--spacing) / 2);
		}

		.track-name {
			font-family: var(--font-stack-serif);
		}

		.track-time {
			color: var(--color-primary-dark);
			font-size: 0.8em;
		}
	}
</style>
