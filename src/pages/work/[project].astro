---
import type { GetStaticPaths, InferGetStaticPropsType } from 'astro'
import type { CreativeWork, WithContext } from 'schema-dts'
import { getCollection, render } from 'astro:content'

import Layout from '../../layouts/layout.astro'
import Link from '../../components/link.astro'
import siteMetadata from '../../helpers/site-metadata'

export const getStaticPaths = (async () => {
	const projects = await getCollection('project')
	return projects.map((project) => ({
		params: { project: project.id },
		props: { project },
	}))
}) satisfies GetStaticPaths

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { project } = Astro.props
const { Content } = await render(project)
const site = Astro.site?.toString()

const jsonLd: WithContext<CreativeWork> = {
	'@context': 'https://schema.org',
	'@type': 'CreativeWork',
	name: project.data.title,
	headline: `${project.data.title}: ${project.data.subtitle}`,
	description: project.data.excerpt,
	url: Astro.url.toString(),
	image: {
		'@type': 'ImageObject',
		url: new URL(project.data.thumbnail.src, Astro.url).toString(),
	},
	author: {
		'@type': 'Person',
		name: siteMetadata.author.name,
		url: site,
		sameAs: [
			`https://bsky.app/profile/${siteMetadata.author.social.bluesky}`,
			`https://github.com/${siteMetadata.author.social.github}`,
			`https://www.linkedin.com/in/${siteMetadata.author.social.linkedin}/`,
		],
	},
}
---

<Layout
	title={project.data.title}
	meta={{
		title: `${project.data.title} - Work - Guillem Andreu`,
		description: project.data.excerpt,
		image: { alt: '', ...project.data.thumbnail },
	}}
>
	<article class="project">
		<script
			is:inline
			type="application/ld+json"
			set:html={JSON.stringify(jsonLd)}
		/>
		<h1>{project.data.title}<span class="period">.</span></h1>
		<p class="project-subtitle">
			{project.data.subtitle}.
		</p>
		<Content components={{ a: Link }} />
	</article>
</Layout>

<style lang="scss">
	@use '../../styles/utils/mixins' as m;

	@layer layout {
		.project {
			@include m.text-wrap;

			:global(img) {
				background-color: #fff;
				border: 1px solid var(--color-background-dark);
				border-radius: var(--spacing);
				margin-block-start: var(--margin-extrasmall);
				@include m.enter-screen-animation;
			}

			:global(.two-col-images) {
				margin-block-start: var(--margin-extrasmall);
			}
		}

		.project-subtitle {
			color: var(--color-foreground-light);
			font-family: var(--font-stack-sans);
			font-size: 1.5rem;
			font-weight: 600;
			line-height: 1.25;
			margin-block: 0.25lh 0.5lh;
			margin-inline: 0;
		}

		@media (width >= 40em) {
			.project :global(.two-col-images) {
				display: grid;
				gap: var(--layout-gap);
				grid-template-columns: repeat(2, 1fr);
				width: var(--layout-width);

				:global(img) {
					margin: 0;
					width: 100%;
				}
			}
		}

		@media (width >= 52em) {
			.project {
				:global(img),
				:global(.two-col-images) {
					margin-inline-start: calc(var(--layout-column-width) * -1 - 1px);
				}

				:global(img) {
					max-width: none;
					width: var(--layout-width);

					&:global(.narrow-image) {
						margin-inline-start: 0;
						width: 100%;
					}
				}
			}
		}

		@media (width >= 72em) {
			.project {
				:global(img),
				:global(.two-col-images) {
					margin-inline-start: calc(var(--layout-column-width) * -2 - 2px);
				}
			}
		}
	}
</style>
